%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp | program | exp_seq | lval 

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%left AND OR
%nonassoc EQ NEQ LT GT LE GE
%left PLUS MINUS

%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 *)

program	: exp				()

lval : ID		()exp: lval				()
	| NIL				()
	| INT				()
	| STRING			()
	| MINUS exp 	  		()	(* negation *)
	| LPAREN exp_seq RPAREN		()
	| ID LPAREN exp_seq RPAREN	()	(* function call *)
	| ID LBRACK exp RBRACK OF exp  	()	(* array creation *)
	| lval ASSIGN exp 		()	(* l-value assignment *)
	| IF exp THEN exp ELSE exp	()	(* if-then-else *)
	| IF exp THEN exp %prec DO	()	(* if-then *)
	| WHILE exp DO exp		()	(* while-loop *)
	| FOR ID ASSIGN exp TO exp DO exp 	()	(* for-loop *)
	| BREAK				()
	| LET  ID			()	(* let *)
	| exp MINUS exp 			()  	(* subtraction *)
	| exp DIVIDE exp 			()  	(* division *)
	| exp TIMES exp 			()  	(* multiplication *)
	| exp EQ exp 			()  	(* test equality *)
	| exp NEQ exp 			()  	(* test non-equality *)
	| exp GT exp 			()  	(* test greater-than *)
	| exp LT exp 			()  	(* test less-than *)
	| exp GE exp 			()  	(* test greater-or-equal-than *)
	| exp LE exp 			()  	(* test less-or-equal-than *)
	| exp AND exp 			()  	(* boolean and *)
	| exp OR exp 			()  	(* boolean or *)
	| exp PLUS exp 			() 	(* addition *)

exp_seq : (* empty *)			()	(* no value *)
	| exp 			()



